<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="sem_8c" kind="file" language="C++">
    <compoundname>sem.c</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="sem_8c_1aa75bb5d5cefd5cf6c5e67cd9ab9f800a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PUBLIC <ref refid="structsemaphore" kindref="compound">semaphore</ref></type>
        <definition>PUBLIC semaphore create</definition>
        <argsstring>(int n)</argsstring>
        <name>create</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Creates semaphore. </para>        </briefdescription>
        <detaileddescription>
<para>if n&gt;=0 =&gt; create semaphore and initiate its value with n else is n &lt;0 return a dead semaphore </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/sem.c" line="13" column="1" bodyfile="src/kernel/sys/sem.c" bodystart="13" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="sem_8c_1ab945069594f3894cc3b9c763ae096302" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PUBLIC <ref refid="structsemaphore" kindref="compound">semaphore</ref></type>
        <definition>PUBLIC semaphore down</definition>
        <argsstring>(semaphore *sem)</argsstring>
        <name>down</name>
        <param>
          <type><ref refid="structsemaphore" kindref="compound">semaphore</ref> *</type>
          <declname>sem</declname>
        </param>
        <briefdescription>
<para>Tests semaphore value to decrease. </para>        </briefdescription>
        <detaileddescription>
<para>if value &gt; 0 it is decremented and the calling process continues to execute normally otherwise the process is blocked on the waiting queue </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/sem.c" line="32" column="1" bodyfile="src/kernel/sys/sem.c" bodystart="32" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="sem_8c_1a23b0b59e6548fa4d044a10cd091c963e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PUBLIC <ref refid="structsemaphore" kindref="compound">semaphore</ref></type>
        <definition>PUBLIC semaphore up</definition>
        <argsstring>(semaphore *sem)</argsstring>
        <name>up</name>
        <param>
          <type><ref refid="structsemaphore" kindref="compound">semaphore</ref> *</type>
          <declname>sem</declname>
        </param>
        <briefdescription>
<para>Tests semaphore value to increase. </para>        </briefdescription>
        <detaileddescription>
<para>If the value become positive, we wake up the first process in the waiting queue. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/sem.c" line="47" column="1" bodyfile="src/kernel/sys/sem.c" bodystart="47" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="sem_8c_1ae53b5d9b3a5b0d8ca0e6cb4ae79a6bcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PUBLIC <ref refid="structsemaphore" kindref="compound">semaphore</ref></type>
        <definition>PUBLIC semaphore destroy</definition>
        <argsstring>(semaphore *sem)</argsstring>
        <name>destroy</name>
        <param>
          <type><ref refid="structsemaphore" kindref="compound">semaphore</ref> *</type>
          <declname>sem</declname>
        </param>
        <briefdescription>
<para>Destroys the semaphore. </para>        </briefdescription>
        <detaileddescription>
<para>we set the vlue and waiting queue of semaphore </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kernel/sys/sem.c" line="60" column="1" bodyfile="src/kernel/sys/sem.c" bodystart="60" bodyend="65"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="const_8h" kindref="compound">nanvix/const.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="pm_8h" kindref="compound">nanvix/pm.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="hal_8h" kindref="compound">nanvix/hal.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/sem.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal">PUBLIC<sp/><ref refid="structsemaphore" kindref="compound">semaphore</ref><sp/>create(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n){</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><ref refid="structsemaphore" kindref="compound">semaphore</ref><sp/>sem;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(n&lt;0){</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>destroy(&amp;sem);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>sem.value<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>sem.wait_queue<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sem;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">PUBLIC<sp/><ref refid="structsemaphore" kindref="compound">semaphore</ref><sp/>down(<ref refid="structsemaphore" kindref="compound">semaphore</ref><sp/>*sem){</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>sem-&gt;value--;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sem-&gt;value&lt;0){</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pm_8h_1a8c4dedf40a191460646b9c8485630586" kindref="member">sleep</ref>(&amp;(sem-&gt;wait_queue),<sp/>PRIO_SEM);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*sem;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">PUBLIC<sp/><ref refid="structsemaphore" kindref="compound">semaphore</ref><sp/>up(<ref refid="structsemaphore" kindref="compound">semaphore</ref><sp/>*sem){</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>sem-&gt;value++;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sem-&gt;value&lt;=0){</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pm_8h_1a17553686b616b68f1b306ae7cb5261ec" kindref="member">wakeup</ref>(&amp;(sem-&gt;wait_queue));</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*sem;</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal">PUBLIC<sp/><ref refid="structsemaphore" kindref="compound">semaphore</ref><sp/>destroy(<ref refid="structsemaphore" kindref="compound">semaphore</ref><sp/>*sem){</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>sem<sp/>-&gt;<sp/>value<sp/>=<sp/>SEM_EMPTY;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>sem-&gt;wait_queue<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*sem;</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/kernel/sys/sem.c"/>
  </compounddef>
</doxygen>
